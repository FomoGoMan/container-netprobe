// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package traffic

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTraffic returns the embedded CollectionSpec for traffic.
func loadTraffic() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TrafficBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load traffic: %w", err)
	}

	return spec, err
}

// loadTrafficObjects loads traffic and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*trafficObjects
//	*trafficPrograms
//	*trafficMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTrafficObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTraffic()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// trafficSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficSpecs struct {
	trafficProgramSpecs
	trafficMapSpecs
}

// trafficSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficProgramSpecs struct {
	FexitTcpSendmsg          *ebpf.ProgramSpec `ebpf:"fexit_tcp_sendmsg"`
	FexitTcpSendpage         *ebpf.ProgramSpec `ebpf:"fexit_tcp_sendpage"`
	FexitUdpSendmsg          *ebpf.ProgramSpec `ebpf:"fexit_udp_sendmsg"`
	FexitUdpv6Sendmsg        *ebpf.ProgramSpec `ebpf:"fexit_udpv6_sendmsg"`
	KprobeInetCskDestroySock *ebpf.ProgramSpec `ebpf:"kprobe_inet_csk_destroy_sock"`
	KprobeIp6Output          *ebpf.ProgramSpec `ebpf:"kprobe_ip6_output"`
	KprobeIpOutput           *ebpf.ProgramSpec `ebpf:"kprobe_ip_output"`
	KprobeSkbConsumeUdp      *ebpf.ProgramSpec `ebpf:"kprobe_skb_consume_udp"`
	KprobeTcpCleanupRbuf     *ebpf.ProgramSpec `ebpf:"kprobe_tcp_cleanup_rbuf"`
}

// trafficMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficMapSpecs struct {
	L3RawSendBytes *ebpf.MapSpec `ebpf:"L3_raw_send_bytes"`
	L3TcpSendBytes *ebpf.MapSpec `ebpf:"L3_tcp_send_bytes"`
	L3UdpSendBytes *ebpf.MapSpec `ebpf:"L3_udp_send_bytes"`
	L4TcpRecvBytes *ebpf.MapSpec `ebpf:"L4_tcp_recv_bytes"`
	L4TcpSendBytes *ebpf.MapSpec `ebpf:"L4_tcp_send_bytes"`
	L4UdpRecvBytes *ebpf.MapSpec `ebpf:"L4_udp_recv_bytes"`
	L4UdpSendBytes *ebpf.MapSpec `ebpf:"L4_udp_send_bytes"`
	TcpSockMap     *ebpf.MapSpec `ebpf:"tcp_sock_map"`
}

// trafficObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTrafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficObjects struct {
	trafficPrograms
	trafficMaps
}

func (o *trafficObjects) Close() error {
	return _TrafficClose(
		&o.trafficPrograms,
		&o.trafficMaps,
	)
}

// trafficMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTrafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficMaps struct {
	L3RawSendBytes *ebpf.Map `ebpf:"L3_raw_send_bytes"`
	L3TcpSendBytes *ebpf.Map `ebpf:"L3_tcp_send_bytes"`
	L3UdpSendBytes *ebpf.Map `ebpf:"L3_udp_send_bytes"`
	L4TcpRecvBytes *ebpf.Map `ebpf:"L4_tcp_recv_bytes"`
	L4TcpSendBytes *ebpf.Map `ebpf:"L4_tcp_send_bytes"`
	L4UdpRecvBytes *ebpf.Map `ebpf:"L4_udp_recv_bytes"`
	L4UdpSendBytes *ebpf.Map `ebpf:"L4_udp_send_bytes"`
	TcpSockMap     *ebpf.Map `ebpf:"tcp_sock_map"`
}

func (m *trafficMaps) Close() error {
	return _TrafficClose(
		m.L3RawSendBytes,
		m.L3TcpSendBytes,
		m.L3UdpSendBytes,
		m.L4TcpRecvBytes,
		m.L4TcpSendBytes,
		m.L4UdpRecvBytes,
		m.L4UdpSendBytes,
		m.TcpSockMap,
	)
}

// trafficPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTrafficObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficPrograms struct {
	FexitTcpSendmsg          *ebpf.Program `ebpf:"fexit_tcp_sendmsg"`
	FexitTcpSendpage         *ebpf.Program `ebpf:"fexit_tcp_sendpage"`
	FexitUdpSendmsg          *ebpf.Program `ebpf:"fexit_udp_sendmsg"`
	FexitUdpv6Sendmsg        *ebpf.Program `ebpf:"fexit_udpv6_sendmsg"`
	KprobeInetCskDestroySock *ebpf.Program `ebpf:"kprobe_inet_csk_destroy_sock"`
	KprobeIp6Output          *ebpf.Program `ebpf:"kprobe_ip6_output"`
	KprobeIpOutput           *ebpf.Program `ebpf:"kprobe_ip_output"`
	KprobeSkbConsumeUdp      *ebpf.Program `ebpf:"kprobe_skb_consume_udp"`
	KprobeTcpCleanupRbuf     *ebpf.Program `ebpf:"kprobe_tcp_cleanup_rbuf"`
}

func (p *trafficPrograms) Close() error {
	return _TrafficClose(
		p.FexitTcpSendmsg,
		p.FexitTcpSendpage,
		p.FexitUdpSendmsg,
		p.FexitUdpv6Sendmsg,
		p.KprobeInetCskDestroySock,
		p.KprobeIp6Output,
		p.KprobeIpOutput,
		p.KprobeSkbConsumeUdp,
		p.KprobeTcpCleanupRbuf,
	)
}

func _TrafficClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed traffic_arm64_bpfel.o
var _TrafficBytes []byte
